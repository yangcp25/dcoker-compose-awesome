user  nginx;            #运行用户
worker_processes  auto;        #启动进程,通常设置成和cpu的数量相等

#全局错误日志及PID文件
error_log  /var/log/nginx/error.log;
error_log  /var/log/nginx/error.log  notice;
error_log  /var/log/nginx/error.log  info;
pid        /var/run/nginx.pid;

# 工作模式及连接数上线
events {
    use epoll;            #epoll是多路复用IO(I/O Multiplexing)中的一种方式,但是仅用于linux2.6以上内核,可以大大提高nginx的性能

    worker_connections  1024;    #单个后台worker process进程的最大并发链接数
}

#设定http服务器,利用它的反向代理功能提供负载均衡支持
http {
    include       mime.types;
    default_type  application/octet-stream;

    #设定请求缓冲
    server_names_hash_bucket_size  128;
    client_header_buffer_size   32K;
    large_client_header_buffers  4 32k;
    # client_max_body_size   8m;

    #sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，对于普通应用，
    #必须设为 on,如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，以平衡磁盘与网络I/O处理速度，降低系统的uptime.
    sendfile        on;
    tcp_nopush     on;
    tcp_nodelay    on;

    #连接超时时间
    keepalive_timeout  65;

    #开启gzip压缩，降低传输流量
    gzip  on;
    gzip_min_length    1k;
    gzip_buffers    4 16k;
    gzip_http_version  1.1;
    gzip_comp_level  2;
    gzip_types  text/plain application/x-javascript text/css  application/xml;
    gzip_vary on;

    #添加backend列表，真实应用服务器都放在这
    upstream backend {
        # 默认为轮询
        server localhost:8081 weight=3 max_fails=2 fail_timeout=30s;
        server localhost:8082 weight=4 max_fails=2 fail_timeout=30s;
        server localhost:8083 weight=3 max_fails=2 fail_timeout=30s;
        # 添加更多的后端服务器...
    }

    server {
        listen       80;        #监听端口
        server_name  localhost;

        #默认请求设置
        location / {
            proxy_pass http://backend;    #转向backend
        }

        #定义错误提示页面
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
    server {
        listen 8081;
        server_name  localhost;
        location / {
           return 201 'OK from backend1';
        }
    }
    server {
        listen 8082;
        server_name  localhost;
        location / {
           return 202 'OK from backend2';
        }
    }
    server {
        listen 8083;
        server_name  localhost;
        location / {
           return 203 'OK from backend3';
        }
    }
}